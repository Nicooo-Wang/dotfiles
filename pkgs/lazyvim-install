#!/bin/bash

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# LazyVim 最低版本要求
MIN_NVIM_VERSION="0.9.0"

# 错误处理函数
error_exit() {
    echo -e "${RED}错误: $1${NC}" >&2
    exit 1
}

# 成功提示函数
success_msg() {
    echo -e "${GREEN}✓ $1${NC}"
}

# 警告提示函数
warning_msg() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# 信息提示函数
info_msg() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# 版本比较函数
version_compare() {
    local ver1=$1
    local ver2=$2
    
    # 移除可能的 'v' 前缀和后缀信息
    ver1=$(echo "$ver1" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    ver2=$(echo "$ver2" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    
    # 使用sort -V进行版本比较
    if printf '%s\n%s\n' "$ver1" "$ver2" | sort -V -C; then
        return 0  # ver1 >= ver2
    else
        return 1  # ver1 < ver2
    fi
}

# 检查neovim版本是否满足要求
check_nvim_version() {
    if ! command -v nvim &> /dev/null; then
        warning_msg "未找到nvim命令"
        return 1
    fi
    
    local current_version
    current_version=$(nvim --version 2>/dev/null | head -1)
    
    if [ -z "$current_version" ]; then
        warning_msg "无法获取Neovim版本信息"
        return 1
    fi
    
    echo "当前Neovim版本: $current_version"
    echo "LazyVim最低要求: $MIN_NVIM_VERSION"
    
    # 提取版本号
    local version_num
    version_num=$(echo "$current_version" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    
    if [ -z "$version_num" ]; then
        warning_msg "无法解析版本号"
        return 1
    fi
    
    if version_compare "$version_num" "$MIN_NVIM_VERSION"; then
        success_msg "Neovim版本满足LazyVim要求 ($version_num >= $MIN_NVIM_VERSION)"
        return 0
    else
        warning_msg "Neovim版本过低 ($version_num < $MIN_NVIM_VERSION)，LazyVim可能无法正常工作"
        return 1
    fi
}

# 检测系统环境
detect_environment() {
    # 检查是否有sudo命令
    if command -v sudo &> /dev/null; then
        HAS_SUDO=true
        # 检查是否有sudo权限
        if sudo -n true 2>/dev/null; then
            CAN_SUDO=true
        else
            CAN_SUDO=false
        fi
    else
        HAS_SUDO=false
        CAN_SUDO=false
    fi

    # 检查是否是root用户
    if [ "$EUID" -eq 0 ]; then
        IS_ROOT=true
    else
        IS_ROOT=false
    fi

    # 检查是否支持apt
    if ! command -v apt &> /dev/null; then
        error_exit "此脚本仅支持基于apt的系统（Ubuntu/Debian等）"
    fi
}

# 从GitHub releases下载最新neovim（备用方案）
install_neovim_user() {
    info_msg "使用备用方案：从GitHub下载最新Neovim到用户目录..."
    
    # 创建用户本地bin目录
    mkdir -p "$HOME/.local/bin"
    
    # 检测系统架构
    ARCH=$(uname -m)
    case $ARCH in
        x86_64)
            NVIM_ARCH="linux64"
            ;;
        aarch64|arm64)
            NVIM_ARCH="linux64"
            ;;
        *)
            error_exit "不支持的系统架构: $ARCH"
            ;;
    esac
    
    # 下载最新的neovim预编译包
    NVIM_URL="https://github.com/neovim/neovim/releases/latest/download/nvim-${NVIM_ARCH}.tar.gz"
    TEMP_DIR=$(mktemp -d)
    
    info_msg "下载Neovim预编译包..."
    if command -v wget &> /dev/null; then
        wget -O "$TEMP_DIR/nvim.tar.gz" "$NVIM_URL" || return 1
    elif command -v curl &> /dev/null; then
        curl -L -o "$TEMP_DIR/nvim.tar.gz" "$NVIM_URL" || return 1
    else
        error_exit "需要wget或curl来下载文件"
    fi
    
    info_msg "解压Neovim..."
    cd "$TEMP_DIR"
    tar -xzf nvim.tar.gz || return 1
    
    # 复制到用户目录
    cp -r nvim-${NVIM_ARCH}/* "$HOME/.local/" || return 1
    
    # 清理临时目录
    rm -rf "$TEMP_DIR"
    
    # 添加到PATH（如果还没有）
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        info_msg "添加 ~/.local/bin 到PATH..."
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.profile"
        export PATH="$HOME/.local/bin:$PATH"
    fi
    
    success_msg "用户模式安装Neovim成功"
    return 0
}

echo "开始安装 Neovim 和 LazyVim..."

# 检测环境
detect_environment

# 显示环境信息
info_msg "环境检测结果:"
echo "  - 系统: $(uname -s) $(uname -m)"
echo "  - 是否为root: $IS_ROOT"
echo "  - 是否有sudo: $HAS_SUDO"
echo "  - 是否可以sudo: $CAN_SUDO"

# 首先检查是否已经安装了合适版本的neovim
echo ""
echo "检查现有Neovim安装..."
if check_nvim_version; then
    echo ""
    read -p "已安装合适版本的Neovim，是否继续安装LazyVim？(y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info_msg "跳过Neovim安装，直接安装LazyVim..."
        SKIP_NVIM_INSTALL=true
    fi
fi

# 步骤1: 安装neovim（如果需要）
if [ "$SKIP_NVIM_INSTALL" != true ]; then
    echo ""
    echo "步骤1: 安装最新版Neovim..."
    
    # 检查权限并安装
    if [ "$IS_ROOT" = true ] || [ "$CAN_SUDO" = true ]; then
        info_msg "使用PPA安装最新Neovim..."
        
        # 添加PPA
        if [ "$IS_ROOT" = true ]; then
            add-apt-repository ppa:neovim-ppa/unstable -y || error_exit "添加Neovim PPA失败"
            apt update || error_exit "更新包列表失败"
            apt install neovim -y || error_exit "安装Neovim失败"
        else
            sudo add-apt-repository ppa:neovim-ppa/unstable -y || error_exit "添加Neovim PPA失败"
            sudo apt update || error_exit "更新包列表失败"
            sudo apt install neovim -y || error_exit "安装Neovim失败"
        fi
        
        success_msg "通过PPA安装Neovim成功"
    else
        warning_msg "没有管理员权限，使用备用安装方案..."
        if ! install_neovim_user; then
            error_exit "备用安装方案失败"
        fi
    fi
    
    # 验证安装并检查版本
    echo ""
    echo "验证Neovim安装..."
    if ! check_nvim_version; then
        warning_msg "安装的Neovim版本可能不满足LazyVim要求"
        echo ""
        read -p "是否继续安装LazyVim？(y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error_exit "用户选择退出"
        fi
    fi
fi

# 步骤2: 检查git
echo ""
echo "步骤2: 检查Git..."
if ! command -v git &> /dev/null; then
    info_msg "Git未安装，正在安装..."
    if [ "$IS_ROOT" = true ]; then
        apt install git -y || error_exit "安装Git失败"
    elif [ "$CAN_SUDO" = true ]; then
        sudo apt install git -y || error_exit "安装Git失败"
    else
        error_exit "需要管理员权限来安装Git，请手动安装Git后重新运行此脚本"
    fi
    success_msg "Git安装成功"
else
    success_msg "Git已安装"
fi

# 步骤3: 备份现有配置
echo ""
echo "步骤3: 检查现有Neovim配置..."
if [ -d "$HOME/.config/nvim" ]; then
    warning_msg "发现现有的Neovim配置"
    BACKUP_DIR="$HOME/.config/nvim.backup.$(date +%Y%m%d_%H%M%S)"
    echo "备份到: $BACKUP_DIR"
    if ! mv "$HOME/.config/nvim" "$BACKUP_DIR"; then
        error_exit "备份现有配置失败"
    fi
    success_msg "现有配置已备份到 $BACKUP_DIR"
fi

# 步骤4: 安装LazyVim
echo ""
echo "步骤4: 安装LazyVim..."
if ! git clone https://github.com/LazyVim/starter "$HOME/.config/nvim"; then
    error_exit "克隆LazyVim配置失败，请检查网络连接"
fi
success_msg "LazyVim配置克隆成功"

# 步骤5: 清理配置
echo ""
echo "步骤5: 清理LazyVim配置..."
if ! rm -rf "$HOME/.config/nvim/.git"; then
    warning_msg "删除.git目录失败，但不影响使用"
else
    success_msg "LazyVim配置清理完成"
fi

# 最终版本检查
echo ""
echo "最终检查..."
if command -v nvim &> /dev/null; then
    nvim_version=$(nvim --version | head -1)
    echo "安装的Neovim版本: $nvim_version"
    
    if check_nvim_version; then
        success_msg "版本检查通过"
    else
        warning_msg "版本检查未通过，LazyVim可能无法正常工作"
    fi
else
    error_exit "安装完成但未找到nvim命令"
fi

echo ""
success_msg "安装完成！"
echo ""
echo "使用说明:"
echo "1. 运行 'nvim' 启动Neovim"
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && [ -f "$HOME/.local/bin/nvim" ]; then
    echo "   注意: 如果提示找不到nvim命令，请重新打开终端或运行: source ~/.bashrc"
fi
echo "2. 首次启动时LazyVim会自动安装插件，请耐心等待（可能需要几分钟）"
echo "3. 安装过程中可能会提示安装某些依赖，按提示操作即可"
echo "4. 按 ':help LazyVim' 查看LazyVim帮助文档"
echo "5. 按 '<leader>?' 查看键位绑定（默认leader键是空格）"
echo ""
echo "如果遇到问题:"
echo "- 检查Neovim版本是否 >= $MIN_NVIM_VERSION"
echo "- 查看 ~/.config/nvim/ 目录下的配置文件"
echo "- 首次启动如果有错误，多试几次让插件完全安装"
